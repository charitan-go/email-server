// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: pkg/proto/email.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailGrpcService_GetPrivateEmail_FullMethodName = "/EmailGrpcService/GetPrivateEmail"
	EmailGrpcService_GetPublicEmail_FullMethodName  = "/EmailGrpcService/GetPublicEmail"
)

// EmailGrpcServiceClient is the client API for EmailGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailGrpcServiceClient interface {
	GetPrivateEmail(ctx context.Context, in *GetPrivateEmailRequestDto, opts ...grpc.CallOption) (*GetPrivateEmailResponseDto, error)
	GetPublicEmail(ctx context.Context, in *GetPublicEmailRequestDto, opts ...grpc.CallOption) (*GetPublicEmailResponseDto, error)
}

type emailGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailGrpcServiceClient(cc grpc.ClientConnInterface) EmailGrpcServiceClient {
	return &emailGrpcServiceClient{cc}
}

func (c *emailGrpcServiceClient) GetPrivateEmail(ctx context.Context, in *GetPrivateEmailRequestDto, opts ...grpc.CallOption) (*GetPrivateEmailResponseDto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrivateEmailResponseDto)
	err := c.cc.Invoke(ctx, EmailGrpcService_GetPrivateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailGrpcServiceClient) GetPublicEmail(ctx context.Context, in *GetPublicEmailRequestDto, opts ...grpc.CallOption) (*GetPublicEmailResponseDto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicEmailResponseDto)
	err := c.cc.Invoke(ctx, EmailGrpcService_GetPublicEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailGrpcServiceServer is the server API for EmailGrpcService service.
// All implementations must embed UnimplementedEmailGrpcServiceServer
// for forward compatibility.
type EmailGrpcServiceServer interface {
	GetPrivateEmail(context.Context, *GetPrivateEmailRequestDto) (*GetPrivateEmailResponseDto, error)
	GetPublicEmail(context.Context, *GetPublicEmailRequestDto) (*GetPublicEmailResponseDto, error)
	mustEmbedUnimplementedEmailGrpcServiceServer()
}

// UnimplementedEmailGrpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailGrpcServiceServer struct{}

func (UnimplementedEmailGrpcServiceServer) GetPrivateEmail(context.Context, *GetPrivateEmailRequestDto) (*GetPrivateEmailResponseDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateEmail not implemented")
}
func (UnimplementedEmailGrpcServiceServer) GetPublicEmail(context.Context, *GetPublicEmailRequestDto) (*GetPublicEmailResponseDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicEmail not implemented")
}
func (UnimplementedEmailGrpcServiceServer) mustEmbedUnimplementedEmailGrpcServiceServer() {}
func (UnimplementedEmailGrpcServiceServer) testEmbeddedByValue()                        {}

// UnsafeEmailGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailGrpcServiceServer will
// result in compilation errors.
type UnsafeEmailGrpcServiceServer interface {
	mustEmbedUnimplementedEmailGrpcServiceServer()
}

func RegisterEmailGrpcServiceServer(s grpc.ServiceRegistrar, srv EmailGrpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailGrpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailGrpcService_ServiceDesc, srv)
}

func _EmailGrpcService_GetPrivateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateEmailRequestDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailGrpcServiceServer).GetPrivateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailGrpcService_GetPrivateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailGrpcServiceServer).GetPrivateEmail(ctx, req.(*GetPrivateEmailRequestDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailGrpcService_GetPublicEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicEmailRequestDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailGrpcServiceServer).GetPublicEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailGrpcService_GetPublicEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailGrpcServiceServer).GetPublicEmail(ctx, req.(*GetPublicEmailRequestDto))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailGrpcService_ServiceDesc is the grpc.ServiceDesc for EmailGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmailGrpcService",
	HandlerType: (*EmailGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrivateEmail",
			Handler:    _EmailGrpcService_GetPrivateEmail_Handler,
		},
		{
			MethodName: "GetPublicEmail",
			Handler:    _EmailGrpcService_GetPublicEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/email.proto",
}
